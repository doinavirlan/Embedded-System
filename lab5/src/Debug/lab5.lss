
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  0000020e  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000013a  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000034e  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001cb  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000519  00000000  00000000  0000103f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000157  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005a  00000000  00000000  000017cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000092  00000000  00000000  00001829  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  74:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initButtonOne>:
#include "button.h"


void initButtonOne() {
	DDRD &= ~(1 << PORTD0) ;
  7c:	88 98       	cbi	0x11, 0	; 17
}
  7e:	08 95       	ret

00000080 <initButtonTwo>:

void initButtonTwo() {
	DDRD &= ~(1 << PORTD1) ;
  80:	89 98       	cbi	0x11, 1	; 17
}
  82:	08 95       	ret

00000084 <isButtonOnePressed>:

int isButtonOnePressed() {
	return PIND & (1<<PORTD0);
  84:	20 b3       	in	r18, 0x10	; 16
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	21 70       	andi	r18, 0x01	; 1
  8a:	30 70       	andi	r19, 0x00	; 0
}
  8c:	82 2f       	mov	r24, r18
  8e:	93 2f       	mov	r25, r19
  90:	08 95       	ret

00000092 <isButtonTwoPressed>:

int isButtonTwoPressed() {
	return PIND & (1<<PORTD1);
  92:	20 b3       	in	r18, 0x10	; 16
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	22 70       	andi	r18, 0x02	; 2
  98:	30 70       	andi	r19, 0x00	; 0
}
  9a:	82 2f       	mov	r24, r18
  9c:	93 2f       	mov	r25, r19
  9e:	08 95       	ret

000000a0 <L293_init>:

#include "L293.h"


void L293_init() {
	DDRC = 0xFF; //PORTB as Output
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	84 bb       	out	0x14, r24	; 20

}
  a4:	08 95       	ret

000000a6 <L293_clockwise>:


void L293_clockwise()
{
	PORTC = 0x02; //00000010
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	85 bb       	out	0x15, r24	; 21
}
  aa:	08 95       	ret

000000ac <L293_antiClockwise>:

void L293_antiClockwise()
{
	 //Rotates Motor in Antilockwise
	 PORTC = 0x01; //00000001
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	85 bb       	out	0x15, r24	; 21
}
  b0:	08 95       	ret

000000b2 <L293_stop>:

void L293_stop()
{
	PORTC = 0x00; //00000000
  b2:	15 ba       	out	0x15, r1	; 21
}
  b4:	08 95       	ret

000000b6 <init_led>:
#include <stdint.h>
#define MAX 5


void init_led() {
	DDRA |= 0xFF;
  b6:	8a b3       	in	r24, 0x1a	; 26
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
}
  bc:	08 95       	ret

000000be <turn_on>:

void turn_on(uint32_t pin) {
	PORTA |= pin;
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	68 2b       	or	r22, r24
  c2:	6b bb       	out	0x1b, r22	; 27
}
  c4:	08 95       	ret

000000c6 <turn_off>:

void turn_off(uint32_t pin) {
	PORTA &= pin;
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	68 23       	and	r22, r24
  ca:	6b bb       	out	0x1b, r22	; 27
}
  cc:	08 95       	ret

000000ce <toggle_led>:

void toggle_led(uint32_t pin) {
	 PORTA ^= (1 << pin);
  ce:	2b b3       	in	r18, 0x1b	; 27
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <toggle_led+0xe>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <toggle_led+0xa>
  e0:	ba 01       	movw	r22, r20
  e2:	62 27       	eor	r22, r18
  e4:	6b bb       	out	0x1b, r22	; 27
}
  e6:	08 95       	ret

000000e8 <__vector_11>:
// ********************************************************************************

uint32_t counter = 0;

// timer0 overflow
ISR(TIMER0_OVF_vect) {
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	6f 93       	push	r22
  fc:	7f 93       	push	r23
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
   // XOR PORTA with 0x01 to toggle the second bit up

	toggle_led(counter);
 10a:	60 91 60 00 	lds	r22, 0x0060
 10e:	70 91 61 00 	lds	r23, 0x0061
 112:	80 91 62 00 	lds	r24, 0x0062
 116:	90 91 63 00 	lds	r25, 0x0063
 11a:	0e 94 67 00 	call	0xce	; 0xce <toggle_led>
	counter++;
 11e:	80 91 60 00 	lds	r24, 0x0060
 122:	90 91 61 00 	lds	r25, 0x0061
 126:	a0 91 62 00 	lds	r26, 0x0062
 12a:	b0 91 63 00 	lds	r27, 0x0063
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	a1 1d       	adc	r26, r1
 132:	b1 1d       	adc	r27, r1
 134:	80 93 60 00 	sts	0x0060, r24
 138:	90 93 61 00 	sts	0x0061, r25
 13c:	a0 93 62 00 	sts	0x0062, r26
 140:	b0 93 63 00 	sts	0x0063, r27
	if(counter >= 3) {
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	91 05       	cpc	r25, r1
 148:	a1 05       	cpc	r26, r1
 14a:	b1 05       	cpc	r27, r1
 14c:	40 f0       	brcs	.+16     	; 0x15e <__vector_11+0x76>
		counter = 0;
 14e:	10 92 60 00 	sts	0x0060, r1
 152:	10 92 61 00 	sts	0x0061, r1
 156:	10 92 62 00 	sts	0x0062, r1
 15a:	10 92 63 00 	sts	0x0063, r1
	}
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	bf 91       	pop	r27
 164:	af 91       	pop	r26
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	7f 91       	pop	r23
 16c:	6f 91       	pop	r22
 16e:	5f 91       	pop	r21
 170:	4f 91       	pop	r20
 172:	3f 91       	pop	r19
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <main>:
// ********************************************************************************
// Main
// ********************************************************************************
int main( void ) {
    // Configure PORTA as output
    DDRA = 0xFF;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	8a bb       	out	0x1a, r24	; 26
    PORTA = 0xFF;
 184:	8b bb       	out	0x1b, r24	; 27
    // enable timer overflow interrupt for both Timer0 and Timer1
    TIMSK=(1<<TOIE0) | (1<<TOIE1);
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	89 bf       	out	0x39, r24	; 57
    // set timer0 counter initial value to 0
    TCNT0=0x00;
 18a:	12 be       	out	0x32, r1	; 50


    TCCR1B |= (1 << CS01);
 18c:	8e b5       	in	r24, 0x2e	; 46
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	8e bd       	out	0x2e, r24	; 46
    // enable interrupts
    sei();
 192:	78 94       	sei
 194:	ff cf       	rjmp	.-2      	; 0x194 <main+0x14>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
