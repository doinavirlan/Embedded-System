
LAB4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000060  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d7  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001f1  00000000  00000000  000009bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ea  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031f  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00000fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010c  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000004e  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initButtonOne>:
#include "button.h"


void initButtonOne() {
	DDRD &= ~(1 << PORTD0) ;
  6c:	88 98       	cbi	0x11, 0	; 17
}
  6e:	08 95       	ret

00000070 <initButtonTwo>:

void initButtonTwo() {
	DDRD &= ~(1 << PORTD1) ;
  70:	89 98       	cbi	0x11, 1	; 17
}
  72:	08 95       	ret

00000074 <isButtonOnePressed>:

int isButtonOnePressed() {
	return PIND & (1<<PORTD0);
  74:	20 b3       	in	r18, 0x10	; 16
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	21 70       	andi	r18, 0x01	; 1
  7a:	30 70       	andi	r19, 0x00	; 0
}
  7c:	82 2f       	mov	r24, r18
  7e:	93 2f       	mov	r25, r19
  80:	08 95       	ret

00000082 <isButtonTwoPressed>:

int isButtonTwoPressed() {
	return PIND & (1<<PORTD1);
  82:	20 b3       	in	r18, 0x10	; 16
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	22 70       	andi	r18, 0x02	; 2
  88:	30 70       	andi	r19, 0x00	; 0
}
  8a:	82 2f       	mov	r24, r18
  8c:	93 2f       	mov	r25, r19
  8e:	08 95       	ret

00000090 <L293_init>:

#include "L293.h"


void L293_init() {
	DDRC = 0xFF; //PORTC as Output
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 bb       	out	0x14, r24	; 20

}
  94:	08 95       	ret

00000096 <L293_clockwise>:


void L293_clockwise()
{
	PORTC = 0x02; //00000010  Run motor in clockwise
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	85 bb       	out	0x15, r24	; 21
}
  9a:	08 95       	ret

0000009c <L293_antiClockwise>:

void L293_antiClockwise()
{
	 //Rotates Motor in Antilockwise
	 PORTC = 0x01; //00000001
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	85 bb       	out	0x15, r24	; 21
}
  a0:	08 95       	ret

000000a2 <L293_stop>:

void L293_stop()
{
	PORTC = 0x00; //00000000
  a2:	15 ba       	out	0x15, r1	; 21
}
  a4:	08 95       	ret

000000a6 <main>:



int main(void)
{
	L293_init();
  a6:	0e 94 48 00 	call	0x90	; 0x90 <L293_init>
	initButtonOne();
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <initButtonOne>
	initButtonTwo();
  ae:	0e 94 38 00 	call	0x70	; 0x70 <initButtonTwo>


	  while(1) {

		  if(isButtonOnePressed()) {
  b2:	0e 94 3a 00 	call	0x74	; 0x74 <isButtonOnePressed>
  b6:	00 97       	sbiw	r24, 0x00	; 0
  b8:	19 f0       	breq	.+6      	; 0xc0 <main+0x1a>
			  L293_clockwise();
  ba:	0e 94 4b 00 	call	0x96	; 0x96 <L293_clockwise>
  be:	f9 cf       	rjmp	.-14     	; 0xb2 <main+0xc>
		  } else if(isButtonTwoPressed()) {
  c0:	0e 94 41 00 	call	0x82	; 0x82 <isButtonTwoPressed>
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	19 f0       	breq	.+6      	; 0xce <main+0x28>
			  L293_antiClockwise();
  c8:	0e 94 4e 00 	call	0x9c	; 0x9c <L293_antiClockwise>
  cc:	f2 cf       	rjmp	.-28     	; 0xb2 <main+0xc>
		  } else {
			  L293_stop();
  ce:	0e 94 51 00 	call	0xa2	; 0xa2 <L293_stop>
  d2:	ef cf       	rjmp	.-34     	; 0xb2 <main+0xc>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
